-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.blockchain_transactions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  tx_hash character varying NOT NULL UNIQUE,
  from_address character varying NOT NULL,
  to_address character varying NOT NULL,
  value numeric,
  gas_used integer,
  gas_price numeric,
  block_number bigint,
  block_hash character varying,
  transaction_index integer,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'confirmed'::character varying, 'failed'::character varying]::text[])),
  contract_address character varying,
  logs jsonb DEFAULT '[]'::jsonb,
  function_name character varying,
  function_params jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  confirmed_at timestamp with time zone,
  CONSTRAINT blockchain_transactions_pkey PRIMARY KEY (id)
);
CREATE TABLE public.chat_messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  chat_id uuid NOT NULL,
  sender_id uuid NOT NULL,
  content text NOT NULL,
  message_type character varying DEFAULT 'text'::character varying CHECK (message_type::text = ANY (ARRAY['text'::character varying, 'image'::character varying, 'file'::character varying, 'emoji'::character varying, 'system'::character varying]::text[])),
  file_url text,
  file_name text,
  file_size bigint,
  file_type character varying,
  reactions jsonb DEFAULT '{}'::jsonb,
  reply_to uuid,
  edited boolean DEFAULT false,
  edited_at timestamp with time zone,
  deleted boolean DEFAULT false,
  deleted_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT chat_messages_pkey PRIMARY KEY (id),
  CONSTRAINT chat_messages_chat_id_fkey FOREIGN KEY (chat_id) REFERENCES public.chats(id),
  CONSTRAINT chat_messages_sender_id_fkey FOREIGN KEY (sender_id) REFERENCES public.users(id),
  CONSTRAINT chat_messages_reply_to_fkey FOREIGN KEY (reply_to) REFERENCES public.chat_messages(id)
);
CREATE TABLE public.chat_participants (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  chat_id uuid NOT NULL,
  user_id uuid NOT NULL,
  joined_at timestamp with time zone DEFAULT now(),
  left_at timestamp with time zone,
  role character varying DEFAULT 'member'::character varying CHECK (role::text = ANY (ARRAY['owner'::character varying, 'admin'::character varying, 'member'::character varying]::text[])),
  unread_count integer DEFAULT 0,
  last_read_at timestamp with time zone DEFAULT now(),
  CONSTRAINT chat_participants_pkey PRIMARY KEY (id),
  CONSTRAINT chat_participants_chat_id_fkey FOREIGN KEY (chat_id) REFERENCES public.chats(id),
  CONSTRAINT chat_participants_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.chat_typing (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  chat_id uuid NOT NULL,
  user_id uuid NOT NULL,
  started_at timestamp with time zone DEFAULT now(),
  CONSTRAINT chat_typing_pkey PRIMARY KEY (id),
  CONSTRAINT chat_typing_chat_id_fkey FOREIGN KEY (chat_id) REFERENCES public.chats(id),
  CONSTRAINT chat_typing_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.chats (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  type character varying NOT NULL CHECK (type::text = ANY (ARRAY['direct'::character varying, 'group'::character varying, 'project'::character varying]::text[])),
  name character varying NOT NULL,
  description text,
  avatar text,
  project_id uuid,
  created_by uuid NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  last_activity timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  CONSTRAINT chats_pkey PRIMARY KEY (id),
  CONSTRAINT chats_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id),
  CONSTRAINT chats_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id)
);
CREATE TABLE public.comments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  project_id uuid,
  idea_id uuid,
  parent_comment_id uuid,
  content text NOT NULL,
  like_count integer DEFAULT 0,
  reply_count integer DEFAULT 0,
  is_edited boolean DEFAULT false,
  is_pinned boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT comments_pkey PRIMARY KEY (id),
  CONSTRAINT comments_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT comments_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id),
  CONSTRAINT comments_idea_id_fkey FOREIGN KEY (idea_id) REFERENCES public.ideas(id),
  CONSTRAINT comments_parent_comment_id_fkey FOREIGN KEY (parent_comment_id) REFERENCES public.comments(id)
);
CREATE TABLE public.contributions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  project_id uuid,
  contributor_id uuid,
  amount numeric NOT NULL,
  currency character varying DEFAULT 'ETH'::character varying,
  blockchain_tx_hash character varying NOT NULL UNIQUE,
  block_number bigint,
  gas_used integer,
  gas_price numeric,
  transaction_fee numeric,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'confirmed'::character varying, 'failed'::character varying]::text[])),
  contribution_message text,
  is_anonymous boolean DEFAULT false,
  reward_tier character varying,
  zkp_proof text,
  created_at timestamp with time zone DEFAULT now(),
  confirmed_at timestamp with time zone,
  CONSTRAINT contributions_pkey PRIMARY KEY (id),
  CONSTRAINT contributions_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id),
  CONSTRAINT contributions_contributor_id_fkey FOREIGN KEY (contributor_id) REFERENCES public.users(id)
);
CREATE TABLE public.email_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  email_type character varying NOT NULL,
  recipient_email character varying NOT NULL,
  recipient_name character varying,
  subject character varying NOT NULL,
  template_id character varying NOT NULL,
  blockchain_hash character varying,
  ipfs_hash character varying,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'sent'::character varying, 'failed'::character varying, 'error'::character varying]::text[])),
  error_message text,
  metadata jsonb DEFAULT '{}'::jsonb,
  retry_count integer DEFAULT 0,
  sent_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT email_logs_pkey PRIMARY KEY (id)
);
CREATE TABLE public.follows (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  follower_id uuid,
  following_id uuid,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT follows_pkey PRIMARY KEY (id),
  CONSTRAINT follows_follower_id_fkey FOREIGN KEY (follower_id) REFERENCES public.users(id),
  CONSTRAINT follows_following_id_fkey FOREIGN KEY (following_id) REFERENCES public.users(id)
);
CREATE TABLE public.ideas (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  creator_id uuid,
  title character varying NOT NULL,
  description text NOT NULL,
  category character varying NOT NULL,
  tags ARRAY,
  estimated_budget numeric,
  currency character varying DEFAULT 'ETH'::character varying,
  status character varying DEFAULT 'draft'::character varying CHECK (status::text = ANY (ARRAY['draft'::character varying, 'pending'::character varying, 'approved'::character varying, 'rejected'::character varying, 'converted'::character varying]::text[])),
  blockchain_tx_hash character varying,
  ipfs_hash character varying,
  image_url text,
  target_audience character varying,
  problem_statement text,
  proposed_solution text,
  expected_impact text,
  technical_requirements text,
  market_analysis text,
  competition_analysis text,
  monetization_strategy text,
  risk_assessment text,
  success_metrics text,
  upvote_count integer DEFAULT 0,
  downvote_count integer DEFAULT 0,
  comment_count integer DEFAULT 0,
  view_count integer DEFAULT 0,
  converted_to_project_id uuid,
  admin_notes text,
  reviewed_at timestamp with time zone,
  reviewed_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ideas_pkey PRIMARY KEY (id),
  CONSTRAINT ideas_creator_id_fkey FOREIGN KEY (creator_id) REFERENCES public.users(id),
  CONSTRAINT ideas_converted_to_project_id_fkey FOREIGN KEY (converted_to_project_id) REFERENCES public.projects(id),
  CONSTRAINT ideas_reviewed_by_fkey FOREIGN KEY (reviewed_by) REFERENCES public.users(id)
);
CREATE TABLE public.ipfs_storage (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  ipfs_hash character varying NOT NULL UNIQUE,
  original_filename character varying,
  file_size bigint,
  content_type character varying,
  uploaded_by uuid,
  project_id uuid,
  idea_id uuid,
  milestone_id uuid,
  file_category character varying CHECK (file_category::text = ANY (ARRAY['image'::character varying, 'video'::character varying, 'document'::character varying, 'whitepaper'::character varying, 'proof'::character varying, 'other'::character varying]::text[])),
  metadata jsonb DEFAULT '{}'::jsonb,
  access_count integer DEFAULT 0,
  is_public boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ipfs_storage_pkey PRIMARY KEY (id),
  CONSTRAINT ipfs_storage_uploaded_by_fkey FOREIGN KEY (uploaded_by) REFERENCES public.users(id),
  CONSTRAINT ipfs_storage_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id),
  CONSTRAINT ipfs_storage_idea_id_fkey FOREIGN KEY (idea_id) REFERENCES public.ideas(id),
  CONSTRAINT ipfs_storage_milestone_id_fkey FOREIGN KEY (milestone_id) REFERENCES public.milestones(id)
);
CREATE TABLE public.milestone_verifications (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  milestone_id uuid,
  verifier_id uuid,
  status character varying NOT NULL CHECK (status::text = ANY (ARRAY['approved'::character varying, 'rejected'::character varying]::text[])),
  verification_proof text,
  comments text,
  blockchain_tx_hash character varying,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT milestone_verifications_pkey PRIMARY KEY (id),
  CONSTRAINT milestone_verifications_milestone_id_fkey FOREIGN KEY (milestone_id) REFERENCES public.milestones(id),
  CONSTRAINT milestone_verifications_verifier_id_fkey FOREIGN KEY (verifier_id) REFERENCES public.users(id)
);
CREATE TABLE public.milestones (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  project_id uuid,
  title character varying NOT NULL,
  description text,
  funding_amount numeric NOT NULL,
  deadline timestamp with time zone,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'in_progress'::character varying, 'completed'::character varying, 'verified'::character varying, 'rejected'::character varying]::text[])),
  blockchain_milestone_id integer,
  completion_proof text,
  ipfs_hash character varying,
  verification_count integer DEFAULT 0,
  required_verifications integer DEFAULT 3,
  funds_released boolean DEFAULT false,
  release_tx_hash character varying,
  created_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  verified_at timestamp with time zone,
  CONSTRAINT milestones_pkey PRIMARY KEY (id),
  CONSTRAINT milestones_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id)
);
CREATE TABLE public.notifications (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  type character varying NOT NULL,
  title character varying NOT NULL,
  message text NOT NULL,
  data jsonb DEFAULT '{}'::jsonb,
  read boolean DEFAULT false,
  action_url text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT notifications_pkey PRIMARY KEY (id),
  CONSTRAINT notifications_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.project_likes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  project_id uuid,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT project_likes_pkey PRIMARY KEY (id),
  CONSTRAINT project_likes_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT project_likes_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id)
);
CREATE TABLE public.projects (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  creator_id uuid,
  title character varying NOT NULL,
  description text NOT NULL,
  short_description character varying,
  category character varying NOT NULL,
  tags ARRAY,
  funding_goal numeric NOT NULL,
  current_funding numeric DEFAULT 0,
  currency character varying DEFAULT 'ETH'::character varying,
  deadline timestamp with time zone,
  status character varying DEFAULT 'draft'::character varying CHECK (status::text = ANY (ARRAY['draft'::character varying, 'pending'::character varying, 'active'::character varying, 'funded'::character varying, 'completed'::character varying, 'cancelled'::character varying]::text[])),
  blockchain_campaign_id integer,
  blockchain_tx_hash character varying,
  ipfs_hash character varying,
  image_url text,
  video_url text,
  website_url text,
  github_url text,
  whitepaper_url text,
  roadmap jsonb DEFAULT '[]'::jsonb,
  team_members jsonb DEFAULT '[]'::jsonb,
  featured boolean DEFAULT false,
  total_backers integer DEFAULT 0,
  view_count integer DEFAULT 0,
  like_count integer DEFAULT 0,
  comment_count integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT projects_pkey PRIMARY KEY (id),
  CONSTRAINT projects_creator_id_fkey FOREIGN KEY (creator_id) REFERENCES public.users(id)
);
CREATE TABLE public.security_alerts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  alert_type character varying NOT NULL,
  severity character varying NOT NULL CHECK (severity::text = ANY (ARRAY['low'::character varying, 'medium'::character varying, 'high'::character varying, 'critical'::character varying]::text[])),
  title character varying NOT NULL,
  description text NOT NULL,
  affected_entity_type character varying,
  affected_entity_id uuid,
  blockchain_tx_hash character varying,
  user_id uuid,
  status character varying DEFAULT 'active'::character varying CHECK (status::text = ANY (ARRAY['active'::character varying, 'investigating'::character varying, 'resolved'::character varying, 'false_positive'::character varying]::text[])),
  resolution_notes text,
  created_at timestamp with time zone DEFAULT now(),
  resolved_at timestamp with time zone,
  CONSTRAINT security_alerts_pkey PRIMARY KEY (id),
  CONSTRAINT security_alerts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.users (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  wallet_address character varying NOT NULL UNIQUE,
  email character varying UNIQUE,
  username character varying UNIQUE,
  full_name character varying,
  bio text,
  avatar_url text,
  website_url text,
  github_url text,
  twitter_url text,
  linkedin_url text,
  location character varying,
  skills ARRAY,
  experience_level character varying CHECK (experience_level::text = ANY (ARRAY['beginner'::character varying, 'intermediate'::character varying, 'advanced'::character varying, 'expert'::character varying]::text[])),
  reputation_score integer DEFAULT 0,
  total_projects integer DEFAULT 0,
  total_contributions numeric DEFAULT 0,
  gender character varying CHECK (gender::text = ANY (ARRAY['male'::character varying, 'female'::character varying, 'other'::character varying]::text[])),
  date_of_birth date,
  role character varying DEFAULT 'funder'::character varying CHECK (role::text = ANY (ARRAY['funder'::character varying, 'fund_raiser'::character varying]::text[])),
  sub_role character varying CHECK (sub_role::text = ANY (ARRAY['individual'::character varying, 'ngo'::character varying, 'company'::character varying]::text[])),
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'approved'::character varying, 'rejected'::character varying]::text[])),
  aadhar_card_hash text,
  pan_card_hash text,
  ngo_certificate_hash text,
  company_paper_hash text,
  verification_token text UNIQUE,
  email_verified boolean DEFAULT false,
  kyc_verified boolean DEFAULT false,
  is_verified boolean DEFAULT false,
  is_active boolean DEFAULT true,
  preferences jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT users_pkey PRIMARY KEY (id)
);
CREATE TABLE public.votes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  idea_id uuid,
  comment_id uuid,
  vote_type character varying NOT NULL CHECK (vote_type::text = ANY (ARRAY['upvote'::character varying, 'downvote'::character varying]::text[])),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT votes_pkey PRIMARY KEY (id),
  CONSTRAINT votes_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT votes_idea_id_fkey FOREIGN KEY (idea_id) REFERENCES public.ideas(id),
  CONSTRAINT votes_comment_id_fkey FOREIGN KEY (comment_id) REFERENCES public.comments(id)
);
CREATE TABLE public.zkp_commitments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  commitment_hash character varying NOT NULL UNIQUE,
  user_id uuid,
  project_id uuid,
  contribution_id uuid,
  proof_type character varying NOT NULL CHECK (proof_type::text = ANY (ARRAY['identity'::character varying, 'contribution'::character varying, 'verification'::character varying, 'voting'::character varying]::text[])),
  nullifier_hash character varying,
  merkle_root character varying,
  proof_data jsonb NOT NULL,
  is_valid boolean DEFAULT true,
  blockchain_tx_hash character varying,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT zkp_commitments_pkey PRIMARY KEY (id),
  CONSTRAINT zkp_commitments_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT zkp_commitments_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id),
  CONSTRAINT zkp_commitments_contribution_id_fkey FOREIGN KEY (contribution_id) REFERENCES public.contributions(id)
);